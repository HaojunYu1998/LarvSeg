# model settings
norm_cfg = dict(type="SyncBN", requires_grad=True)
model = dict(
    type="EncoderDecoder",
    pretrained="pretrain/"
    "",
    backbone=dict(
        type="ResNet",
        depth=50,
        in_channels=3,
        stem_channels=64,
        base_channels=64,
        num_stages=4,
        strides=(1, 2, 2, 2),
        dilations=(1, 1, 1, 1),
        out_indices=(0, 1, 2, 3),
        style="pytorch",
        deep_stem=False,
        avg_down=False,
        frozen_stages=-1,
        conv_cfg=None,
        norm_cfg=dict(type="BN", requires_grad=True),
        norm_eval=False,
        dcn=None,
        stage_with_dcn=(False, False, False, False),
        plugins=None,
        multi_grid=None,
        contract_dilation=False,
        with_cp=False,
        zero_init_residual=True,
        pretrained=None,
        init_cfg=None,
    ),
    neck=dict(
        type="FPN",
        in_channels=[64, 128, 256, 512],
        out_channels=[256, 256, 256, 256],
        num_outs=4,
        start_level=0,
        end_level=-1,
        add_extra_convs=False,
        extra_convs_on_inputs=False,
        relu_before_extra_convs=False,
        no_norm_on_lateral=False,
        conv_cfg=None,
        norm_cfg=None,
        act_cfg=None,
        upsample_cfg=dict(mode="nearest"),
        init_cfg=dict(type="Xavier", layer="Conv2d", distribution="uniform"),
    ),
    decode_head=dict(
        type="MaskTransformerHead",
        n_cls=150,
        patch_size=16,
        d_encoder=768,
        n_layers=2,
        n_heads=12,
        d_model=768,
        d_ff=4 * 768,
        drop_path_rate=0.0,
        dropout=0.1,
        loss_decode=dict(type="CrossEntropyLoss", use_sigmoid=False, loss_weight=1.0),
    ),
    # model training and testing settings
    train_cfg=dict(),
    test_cfg=dict(mode="whole"),
)  # yapf: disable
